{"version":3,"file":"static/js/335.007f36f4.chunk.js","mappings":"gRAEaA,EAAUC,EAAAA,GAAAA,GAAH,6CAIPC,EAAUD,EAAAA,GAAAA,GAAH,gKASPE,EAAUF,EAAAA,GAAAA,EAAH,oGAOPG,EAAUH,EAAAA,GAAAA,EAAH,gJ,SCnBPI,EAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OACE,8BACE,SAACN,EAAD,UACGM,EAAQC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,UAACR,EAAD,YACE,SAACC,EAAD,UAAUM,KACV,SAACL,EAAD,UAAUM,MAFEF,EAKjB,OAIR,E,iBCwCD,EAnDgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAOL,EAAP,KAAgBM,EAAhB,KACA,GAAwBD,EAAAA,EAAAA,WAAS,GAAjC,eAAOE,EAAP,KAAaC,EAAb,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QA+BR,OA7BAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,6FACZJ,GAAQ,GADI,mBAGcK,EAAAA,EAAAA,GAAY,sCAAD,OACKJ,EADL,4EAHzB,OAGJK,EAHI,OAaa,KANjBd,EAAUc,EAAUC,QAAQd,KAAI,kBAA8B,CAClEC,GADoC,EAAGA,GAEvCC,OAFoC,EAAOA,OAG3CC,QAHoC,EAAeA,QAAf,KAM1BY,QACVC,EAAAA,GAAAA,MAAA,eAGFX,EAAWN,GAjBD,kDAmBVkB,QAAQC,IAAI,KAAMC,SAnBR,yBAqBVZ,GAAQ,GArBE,6EAAH,qDAyBXI,GACD,GAAE,CAACH,KAGF,gCACGF,IACC,SAAC,KAAD,CACEc,YAAY,oBACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IAGZzB,IAAW,SAACD,EAAD,CAAYC,QAASA,MAGtC,C,8FCtCYa,EAAW,mCAAG,WAAMa,GAAN,uFACFC,EAAAA,EAAAA,IAAUD,GADR,cACnBE,EADmB,yBAGlBA,EAASC,MAHS,2CAAH,qD","sources":["components/ReviewList/ReviewList.styled.js","components/ReviewList/ReviewList.jsx","components/Reviews/Reviews.jsx","servises/fetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const RevList = styled.ul`\n  margin-top: 20px;\n`;\n\nexport const RevItem = styled.li`\n  box-shadow: 0 0 5px 3px rgb(11 127 171 / 50%);\n  padding: 5px;\n  margin: 0;\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const RevName = styled.p`\n  color: lightgrey;\n  font-weight: 500;\n  font-size: 18px;\n  margin: 0;\n`;\n\nexport const RevText = styled.p`\n  color: lightgrey;\n  font-weight: 400;\n  font-size: 14px;\n  margin: 0;\n  margin-top: 10px;\n\n  line-height: 1.3;\n`;\n","import PropTypes from 'prop-types';\nimport { RevItem, RevList, RevName, RevText } from './ReviewList.styled';\n\nexport const ReviewList = ({ reviews }) => {\n  return (\n    <section>\n      <RevList>\n        {reviews.map(({ id, author, content }) => {\n          return (\n            <RevItem key={id}>\n              <RevName>{author}</RevName>\n              <RevText>{content}</RevText>\n            </RevItem>\n          );\n        })}\n      </RevList>\n    </section>\n  );\n};\n\nReviewList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import { fetchMovies } from '../../servises/fetchMovies';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewList } from '../ReviewList/ReviewList';\nimport { RotatingLines } from 'react-loader-spinner';\nimport toast from 'react-hot-toast';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [load, setLoad] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetch = async () => {\n      setLoad(true);\n      try {\n        const dataMovie = await fetchMovies(\n          `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=2a3036180539eed9a276bdc58fa572fc&language=en-US&page=1`\n        );\n\n        const reviews = dataMovie.results.map(({ id, author, content }) => ({\n          id,\n          author,\n          content,\n        }));\n\n        if (reviews.length === 0) {\n          toast.error(`No reviews.`);\n        }\n\n        setReviews(reviews);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoad(false);\n      }\n    };\n\n    fetch();\n  }, [movieId]);\n\n  return (\n    <>\n      {load && (\n        <RotatingLines\n          strokeColor=\"rgb(11, 127, 171)\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      )}\n      {reviews && <ReviewList reviews={reviews} />}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n// const API_KEY = '2a3036180539eed9a276bdc58fa572fc';\n\n// export const fetchTrendingMovies = async () => {\n//   const response = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n\n//   const dataTrendingMovies = response.data.results.map(\n//     ({ id, original_title }) => ({\n//       id,\n//       original_title,\n//     })\n//   );\n\n//   return dataTrendingMovies;\n// };\n\nexport const fetchMovies = async url => {\n  const response = await axios.get(url);\n\n  return response.data;\n};\n"],"names":["RevList","styled","RevItem","RevName","RevText","ReviewList","reviews","map","id","author","content","useState","setReviews","load","setLoad","movieId","useParams","useEffect","fetch","fetchMovies","dataMovie","results","length","toast","console","log","message","strokeColor","strokeWidth","animationDuration","width","visible","url","axios","response","data"],"sourceRoot":""}