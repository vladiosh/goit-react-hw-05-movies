{"version":3,"file":"static/js/400.647253fd.chunk.js","mappings":"2RAEaA,EAAYC,EAAAA,GAAAA,GAAH,sMAUTC,EAAYD,EAAAA,GAAAA,GAAH,6HAOTE,EAAaF,EAAAA,GAAAA,IAAH,wCAIVG,EAAYH,EAAAA,GAAAA,EAAH,+JASTI,EAAOJ,EAAAA,GAAAA,EAAH,wI,SCtBJK,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACzB,OACE,8BACE,SAACP,EAAD,UACGO,EAAOC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACrC,OACE,UAACV,EAAD,YACE,SAACC,EAAD,CACEU,IACEH,EAAY,0CAC2BA,GACnCI,EAENC,IAAKJ,EACLK,MAAM,QACNC,OAAO,WAET,SAACb,EAAD,UAAYO,KACZ,SAACN,EAAD,UAAOO,MAZOH,EAenB,OAIR,E,iBCyBD,EArDa,WACX,OAA4BS,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAAwBD,EAAAA,EAAAA,WAAS,GAAjC,eAAOE,EAAP,KAAaC,EAAb,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiCR,OAhCAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,6FACZJ,GAAQ,GADI,mBAGcK,EAAAA,EAAAA,GAAY,sCAAD,OACKJ,EADL,qEAHzB,OAGJK,EAHI,OAgBY,KAThBpB,EAASoB,EAAUC,KAAKpB,KAC5B,kBAA4C,CAC1CC,GADF,EAAGA,GAEDE,KAFF,EAAOA,KAGLC,UAHF,EAAaA,UAIXF,aAJF,EAAwBA,aAAxB,KAQSmB,QACTC,EAAAA,GAAAA,MAAA,eAGFX,EAAUZ,GApBA,kDAsBVwB,QAAQC,IAAI,KAAMC,SAtBR,yBAwBVZ,GAAQ,GAxBE,6EAAH,qDA4BXI,GACD,GAAE,CAACH,KAGF,gCACGf,GAAS,SAACD,EAAD,CAAUC,OAAQA,KAAa,4CAA2B,IACnEa,IACC,SAAC,KAAD,CACEc,YAAY,oBACZC,YAAY,IACZC,kBAAkB,OAClBpB,MAAM,KACNqB,SAAS,MAKlB,C,8FCxCYX,EAAW,mCAAG,WAAMY,GAAN,uFACFC,EAAAA,EAAAA,IAAUD,GADR,cACnBE,EADmB,yBAGlBA,EAASC,MAHS,2CAAH,qD","sources":["components/CastList/CastList.styled.js","components/CastList/CastList.jsx","components/Cast/Cast.jsx","servises/fetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListActor = styled.ul`\n  margin-top: 20px;\n  display: grid;\n  width: 1200px;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: 16px;\n  padding: 0px;\n  list-style: none;\n`;\n\nexport const CardActor = styled.li`\n  box-shadow: 0 0 5px 3px rgba(11, 127, 171, 0.5);\n  width: 150px;\n  height: 300px;\n  margin: 0;\n`;\n\nexport const ImageActor = styled.img`\n  width: 100%;\n`;\n\nexport const ActorName = styled.p`\n  color: lightgrey;\n  font-weight: 500;\n  font-size: 14px;\n  margin: 0;\n  padding: 0;\n  margin-left: 3px;\n  margin-bottom: 5px;\n`;\nexport const Text = styled.p`\n  color: lightgrey;\n  font-weight: 200;\n  font-size: 14px;\n  margin: 0;\n  padding: 0;\n  margin-left: 3px;\n`;\n","import PropTypes from 'prop-types';\nimport imageDefault from 'image/defaultImg.jpg';\nimport {\n  CardActor,\n  ImageActor,\n  ListActor,\n  ActorName,\n  Text,\n} from './CastList.styled';\n\nexport const CastList = ({ actors }) => {\n  return (\n    <section>\n      <ListActor>\n        {actors.map(({ id, profile_path, name, character }) => {\n          return (\n            <CardActor key={id}>\n              <ImageActor\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : imageDefault\n                }\n                alt={name}\n                width=\"150px\"\n                height=\"225px\"\n              />\n              <ActorName>{name}</ActorName>\n              <Text>{character}</Text>\n            </CardActor>\n          );\n        })}\n      </ListActor>\n    </section>\n  );\n};\n\nCastList.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import { fetchMovies } from '../../servises/fetchMovies';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList } from '../CastList/CastList';\nimport { RotatingLines } from 'react-loader-spinner';\nimport toast from 'react-hot-toast';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [load, setLoad] = useState(false);\n\n  const { movieId } = useParams();\n  useEffect(() => {\n    const fetch = async () => {\n      setLoad(true);\n      try {\n        const dataMovie = await fetchMovies(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=2a3036180539eed9a276bdc58fa572fc&language=en-US`\n        );\n\n        const actors = dataMovie.cast.map(\n          ({ id, name, character, profile_path }) => ({\n            id,\n            name,\n            character,\n            profile_path,\n          })\n        );\n\n        if (actors.length === 0) {\n          toast.error(`No reviews.`);\n        }\n\n        setActors(actors);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoad(false);\n      }\n    };\n\n    fetch();\n  }, [movieId]);\n\n  return (\n    <>\n      {actors ? <CastList actors={actors} /> : <div>No actors list</div>}{' '}\n      {load && (\n        <RotatingLines\n          strokeColor=\"rgb(11, 127, 171)\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n// const API_KEY = '2a3036180539eed9a276bdc58fa572fc';\n\n// export const fetchTrendingMovies = async () => {\n//   const response = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n\n//   const dataTrendingMovies = response.data.results.map(\n//     ({ id, original_title }) => ({\n//       id,\n//       original_title,\n//     })\n//   );\n\n//   return dataTrendingMovies;\n// };\n\nexport const fetchMovies = async url => {\n  const response = await axios.get(url);\n\n  return response.data;\n};\n"],"names":["ListActor","styled","CardActor","ImageActor","ActorName","Text","CastList","actors","map","id","profile_path","name","character","src","imageDefault","alt","width","height","useState","setActors","load","setLoad","movieId","useParams","useEffect","fetch","fetchMovies","dataMovie","cast","length","toast","console","log","message","strokeColor","strokeWidth","animationDuration","visible","url","axios","response","data"],"sourceRoot":""}